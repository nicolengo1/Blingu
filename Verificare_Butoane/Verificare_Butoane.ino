#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);


// '010_000', 128x32px
const unsigned char  OXO_OOO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '000_010', 128x32px
const unsigned char  OOO_OXO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '000_001', 128x32px
const unsigned char  OOO_OOX [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '000_100', 128x32px
const unsigned char  OOO_XOO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '001_000', 128x32px
const unsigned char  OOX_OOO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00
};
// '100_000', 128x32px
const unsigned char  XOO_OOO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void ScrieBraille(int n)
{
  display.setCursor(0, 0);

  switch (n)
  {
    case 1:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      break;
    case 2:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      break;
    case 3:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 4:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 5:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 6:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 7:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 8:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 9:
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 10:
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 11:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      break;
    case 12:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      break;
    case 13:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 14:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 15:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 16:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 17:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 18:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 19:
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 20:
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      break;
    case 21:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      break;
    case 22:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OOX, 128, 32, WHITE);
      break;
    case 23:
      display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OOX, 128, 32, WHITE);
      break;
    case 24:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OOX, 128, 32, WHITE);
      break;
    case 25:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OOX, 128, 32, WHITE);
      break;
    case 26:
      display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);
      display.drawBitmap(0, 0, OOO_OOX, 128, 32, WHITE);

      break;
    default:
      break;
  }

  display.display();
}


void ScrieLitera(int n)
{
  char alf[] = "ABCDEFGHIJKLMONPQRSTUVWXYZ";

  display.setRotation(3);
  display.setTextSize(6);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(alf[n]);
  display.display();
  display.setRotation(0);
}

void ResetDisplay()
{
  display.clearDisplay();
  display.display();
}


void setup() {
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  pinMode(6, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.display();

  Serial.begin(9600);

  randomSeed(analogRead(0));

  Serial.println(F("ON"));

  ResetDisplay();
  Serial.println("BlinguV1.0...");
  DisplayPrintText("BlinguV1.0...");
  delay(3000);
}

bool A[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 0}, {0, 0, 0}};
bool B[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 1, 0}, {0, 0, 0}};
bool C[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 0, 0}, {0, 0, 0}};
bool D[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 0, 1}, {0, 0, 0}};
bool E[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}};
bool F[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 1, 0}, {0, 0, 0}};
bool G[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 1, 1}, {0, 0, 0}};
bool H[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 1, 1}, {0, 0, 0}};
bool I[4][3] = { {0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 0, 0}};
bool J[4][3] = { {0, 0, 0}, {0, 0, 1}, {0, 1, 1}, {0, 0, 0}};
bool K[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 0}, {0, 1, 0}};
bool L[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}};
bool M[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 0, 0}, {0, 1, 0}};
bool N[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 0, 1}, {0, 1, 0}};
bool O[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 1, 0}};
bool P[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 1, 0}, {0, 1, 0}};
bool Q[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 1, 1}, {0, 1, 0}};
bool R[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 1, 1}, {0, 1, 0}};
bool S[4][3] = { {0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 0}};
bool T[4][3] = { {0, 0, 0}, {0, 0, 1}, {0, 1, 1}, {0, 1, 0}};
bool U[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 0}, {0, 1, 1}};
bool V[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 1}};
bool W[4][3] = { {0, 0, 0}, {0, 0, 1}, {0, 1, 1}, {0, 0, 1}};
bool X[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 0, 0}, {0, 1, 1}};
bool Y[4][3] = { {0, 0, 0}, {0, 1, 1}, {0, 0, 1}, {0, 1, 1}};
bool Z[4][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 1, 1}};


bool MatriceButoane[4][3] = {0};

bool MatriceLitera[4][3] = {0};

void AfisMatriceButoane()
{
  for (int i = 1; i <= 3; i++)
  {
    for (int j = 1; j <= 2; j++)
    {
      Serial.print(MatriceButoane[i][j]);
      Serial.print(' ');
    }
    Serial.print('\n');
  }
  Serial.print('\n');
}

void AfisMatriceLitere(bool MatriceLiteraDeAfisat[][3] )
{
  for (int i = 1; i <= 3; i++)
  {
    for (int j = 1; j <= 2; j++)
    {
      Serial.print(MatriceLiteraDeAfisat[i][j]);
      Serial.print(' ');
    }
    Serial.print('\n');
  }
  Serial.print('\n');
}

int CompareMatrice()
{
  for (int i = 1; i <= 3; i++)
  {
    for (int j = 1; j <= 2; j++)
    {
      if (MatriceButoane[i][j] != MatriceLitera[i][j])
        return 0;
    }
  }

  return 1;
}

void ResetMatriceButoane()
{
  for (int i = 1; i <= 3; i++)
  {
    for (int j = 1; j <= 2; j++)
    {
      MatriceButoane[i][j] = 0;
    }
  }
}

void ChangeMatrice(bool MatricePentruSchimbat[][3])
{
  for (int i = 1; i <= 3; i++)
  {
    for (int j = 1; j <= 2; j++)
    {
      MatriceLitera[i][j] = MatricePentruSchimbat[i][j];
    }
  }
}

int numarAleatoriuDeDinainte = 0;

void ChangeMatriceAleatoriu()
{
  int delayInMilisecunde = 3000;
  int numarRandom;

  numarRandom = random(1, 27);

  ScrieLitera(numarRandom - 1);

  switch (numarRandom)
  {
    case 1:
      ChangeMatrice(A);
      break;
    case 2:
      ChangeMatrice(B);
      break;
    case 3:
      ChangeMatrice(C);
      break;
    case 4:
      ChangeMatrice(D);
      break;
    case 5:
      ChangeMatrice(E);
      break;
    case 6:
      ChangeMatrice(F);
      break;
    case 7:
      ChangeMatrice(G);
      break;
    case 8:
      ChangeMatrice(H);
      break;
    case 9:
      ChangeMatrice(I);
      break;
    case 10:
      ChangeMatrice(J);
      break;
    case 11:
      ChangeMatrice(K);
      break;
    case 12:
      ChangeMatrice(L);
      break;
    case 13:
      ChangeMatrice(M);
      break;
    case 14:
      ChangeMatrice(N);
      break;
    case 15:
      ChangeMatrice(O);
      break;
    case 16:
      ChangeMatrice(P);
      break;
    case 17:
      ChangeMatrice(Q);
      break;
    case 18:
      ChangeMatrice(R);
      break;
    case 19:
      ChangeMatrice(S);
      break;
    case 20:
      ChangeMatrice(T);
      break;
    case 21:
      ChangeMatrice(U);
      break;
    case 22:
      ChangeMatrice(V);
      break;
    case 23:
      ChangeMatrice(W);
      break;
    case 24:
      ChangeMatrice(X);
      break;
    case 25:
      ChangeMatrice(Y);
      break;
    case 26:
      ChangeMatrice(Z);

      break;
    default:
      break;
  }

  delay(delayInMilisecunde);
  ResetDisplay();
}

void ScrieLiteraDinButoane()
{
  display.setCursor(0, 0);

  if (MatriceButoane[1][1] == 1)
    display.drawBitmap(0, 0, XOO_OOO, 128, 32, WHITE);

  if (MatriceButoane[2][1] == 1)
    display.drawBitmap(0, 0, OXO_OOO, 128, 32, WHITE);

  if (MatriceButoane[3][1] == 1)
    display.drawBitmap(0, 0, OOX_OOO, 128, 32, WHITE);

  if (MatriceButoane[1][2] == 1)
    display.drawBitmap(0, 0, OOO_XOO, 128, 32, WHITE);

  if (MatriceButoane[2][2] == 1)
    display.drawBitmap(0, 0, OOO_OXO, 128, 32, WHITE);

  if (MatriceButoane[3][2] == 1)
    display.drawBitmap(0, 0, OOO_OOX, 128, 32, WHITE);

  display.display();
}

int invataSauJoc = -1;

int numarLiteraInvatat = 1;

void DisplayPrintText ( char s[])
{
  display.setRotation(0);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(s);
  display.display();
  display.setRotation(0);
}

void loop() {
  if (invataSauJoc == -1)
  {
    ResetDisplay();
    Serial.println(F("Alege modul de joc:\n Invatat - sus stanga \n Joc - sus dreapta"));
    DisplayPrintText("Alege modul de joc");

    while (invataSauJoc == -1)
    {
      int buton1C1 = !digitalRead(2);
      int buton1C2 = !digitalRead(5);

      if ( buton1C1 == 1 )
        invataSauJoc = 0;
      if ( buton1C2 == 1 )
        invataSauJoc = 1;
        
      while (buton1C1 + buton1C2 > 0)
      {
        buton1C1 = !digitalRead(2);
        buton1C2 = !digitalRead(5);
      }
    }
  }

  ResetDisplay();

  if ( invataSauJoc == 0 )
  {
    int buton1C1 = !digitalRead(2);
    int buton1C2 = !digitalRead(5);

    if ( buton1C1 + buton1C2 > 0)
    {
      invataSauJoc = -1;
      while (buton1C1 + buton1C2 > 0)
      {
        buton1C1 = !digitalRead(2);
        buton1C2 = !digitalRead(3);
      }
    }

    int buton3C1 = !digitalRead(4);
    int buton3C2 = !digitalRead(7);

    if ( buton3C1 == 1 && numarLiteraInvatat > 1)
    {
      numarLiteraInvatat--;
      while (buton3C1 == 1)
        buton3C1 = !digitalRead(4);
    }

    if ( buton3C2 == 1 && numarLiteraInvatat < 26)
    {
      numarLiteraInvatat++;
      while (buton3C2 == 1)
        buton3C2 = !digitalRead(7);
    }

    Serial.println(numarLiteraInvatat);

    int i;

    ResetDisplay();
    ScrieLitera(numarLiteraInvatat - 1);
    Serial.print('a');

    i = 1;
    while (i < 1000)
    {
      delay(1);
      i++;

      buton1C1 = !digitalRead(2);
      buton1C2 = !digitalRead(5);
      //
      if ( buton1C1 + buton1C2 > 0)
      {
        invataSauJoc = -1;
        while (buton1C1 + buton1C2 > 0)
        {
          buton1C1 = !digitalRead(2);
          buton1C2 = !digitalRead(3);
        }
      }

      buton3C1 = !digitalRead(4);
      buton3C2 = !digitalRead(7);

      if ( buton3C1 == 1 && numarLiteraInvatat > 1)
      {
        numarLiteraInvatat--;
        while (buton3C1 == 1)
          buton3C1 = !digitalRead(4);
      }

      if ( buton3C2 == 1 && numarLiteraInvatat < 26)
      {
        numarLiteraInvatat++;
        while (buton3C2 == 1)
          buton3C2 = !digitalRead(7);
      }
    }
    ResetDisplay();

    ScrieBraille(numarLiteraInvatat);

    i = 1;
    while (i < 1000)
    {
      delay(1);
      i++;

      buton1C1 = !digitalRead(2);
      buton1C2 = !digitalRead(5);

      if ( buton1C1 + buton1C2 > 0)
      {
        invataSauJoc = -1;
        while (buton1C1 + buton1C2 > 0)
        {
          buton1C1 = !digitalRead(2);
          buton1C2 = !digitalRead(3);
        }
      }


      buton3C1 = !digitalRead(4);
      buton3C2 = !digitalRead(7);

      if ( buton3C1 == 1 && numarLiteraInvatat > 1)
      {
        numarLiteraInvatat--;
        while (buton3C1 == 1)
          buton3C1 = !digitalRead(4);
      }

      if ( buton3C2 == 1 && numarLiteraInvatat < 26)
      {
        numarLiteraInvatat++;
        while (buton3C2 == 1)
          buton3C2 = !digitalRead(7);
      }
    }

  }

  if ( invataSauJoc == 1 )
  {
    ChangeMatriceAleatoriu();

    ScrieLiteraDinButoane();

    ResetMatriceButoane();

    int CounterMiliSecunde = 0;

    int CounterMiliSecundeRefreshDisplay = 0;

    int buton1C1 = !digitalRead(2);
    int buton2C1 = !digitalRead(3);
    int buton3C1 = !digitalRead(4);
    int buton1C2 = !digitalRead(5);
    int buton2C2 = !digitalRead(6);
    int buton3C2 = !digitalRead(7);

    while (CounterMiliSecunde < 500 )
    {
      buton1C1 = !digitalRead(2);
      buton2C1 = !digitalRead(3);
      buton3C1 = !digitalRead(4);
      buton1C2 = !digitalRead(5);
      buton2C2 = !digitalRead(6);
      buton3C2 = !digitalRead(7);

      AfisMatriceButoane();

      while (buton1C1 == 1)
      {
        MatriceButoane[1][1] = !MatriceButoane[1][1];

        while (buton1C1 == 1)buton1C1 = !digitalRead(2);
      }

      if (buton2C1 == 1)
      {
        MatriceButoane[2][1] = !MatriceButoane[2][1];

        while (buton2C1 == 1)buton2C1 = !digitalRead(3);
      }

      if (buton3C1 == 1)
      {
        MatriceButoane[3][1] = !MatriceButoane[3][1];

        while (buton3C1 == 1)buton3C1 = !digitalRead(4);
      }

      if (buton1C2 == 1)
      {
        MatriceButoane[1][2] = !MatriceButoane[1][2];

        while (buton1C2 == 1)buton1C2 = !digitalRead(5);
      }

      if (buton2C2 == 1)
      {
        MatriceButoane[2][2] = !MatriceButoane[2][2];

        while (buton2C2 == 1)buton2C2 = !digitalRead(6);
      }

      if (buton3C2 == 1)
      {
        MatriceButoane[3][2] = !MatriceButoane[3][2];

        while (buton3C2 == 1)buton3C2 = !digitalRead(7);
      }

      CounterMiliSecundeRefreshDisplay++;
      if (CounterMiliSecundeRefreshDisplay == 50)
      {
        ResetDisplay();
        ScrieLiteraDinButoane();
        CounterMiliSecundeRefreshDisplay = 0;
      }

      delay(1);
      CounterMiliSecunde++;
      //      Serial.println(CounterMiliSecunde);
    }

    ResetDisplay();

    if (CompareMatrice())
    {
      Serial.println("Bravo!");
      DisplayPrintText("Bravo!");
    }

    else
    {
      Serial.println("Gresit!");
      DisplayPrintText("Gresit!");
    }

    ResetMatriceButoane();

    do
    {
      buton1C1 = !digitalRead(2);
      buton2C1 = !digitalRead(3);
      buton3C1 = !digitalRead(4);
      buton1C2 = !digitalRead(5);
      buton2C2 = !digitalRead(6);
      buton3C2 = !digitalRead(7);
    }
    while (buton1C1 + buton2C1 + buton3C1 + buton1C2 + buton2C2 + buton3C2 == 0);

    if (buton1C1 + buton1C2 > 0)
    {
      invataSauJoc = -1;
      while (buton1C1 + buton1C2 > 0)
      {
        buton1C1 = !digitalRead(2);
        buton1C2 = !digitalRead(5);
      }
    }

  }

  delay(100);

}
